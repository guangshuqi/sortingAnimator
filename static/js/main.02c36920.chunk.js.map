{"version":3,"sources":["SortingAnimator/SortingAlgorithm/MergeSort.js","SortingAnimator/SortingAnimator.js","SortingAnimator/SortingAlgorithm/QuickSort.js","SortingAnimator/SortingAlgorithm/BubbleSort.js","App.js","reportWebVitals.js","index.js"],"names":["merge","left","right","sequence","resultArray","leftOffset","leftArr","rightArr","rightOffset","startIndex","leftIndex","rightIndex","length","push","type","indices","newHeights","PRIMARY_COLOR","ANIMATION_SPEED_MS","SORTING_FUNC","getMergeSortSequence","unsortedArray","offset","sequences","N","middle","Math","floor","slice","getQuickSortSequence","auxArray","color","pivot","pivotIdx","i","temp","j","SortingAnimator","React","useState","array","setArray","arrayColor","setArrayColor","isSorting","setIsSorting","isSorted","setIsSorted","sortFunc","setSortFunc","randomize","arr","Array","from","map","_","min","max","random","arrColor","setArrayColorState","oldArray","newArray","forEach","idx","useEffect","getSortSequence","setTimeout","idx1","idx2","hasOwnProperty","idxs","v","newState","setArrayState","runAnimation","className","value","style","backgroundColor","height","disabled","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02c36920.chunk.js","sourcesContent":["// Merge Sort (Recursive)\r\nexport default function getMergeSortSequence (unsortedArray,offset=0, sequences) {\r\n    // No need to sort the array if the array only has one element or empty\r\n    const N = unsortedArray.length\r\n    if (N == 0) {\r\n      return [[], offset];\r\n    }else if (N ==1){\r\n        return [unsortedArray, offset]\r\n    }\r\n    // In order to divide the array in half, we need to figure out the middle\r\n\r\n\r\n    const middle = Math.floor(N/ 2);\r\n    \r\n    const left = unsortedArray.slice(0, middle)\r\n    const right = unsortedArray.slice(middle, N)\r\n\r\n    // Using recursion to combine the left and right\r\n    return merge(\r\n        getMergeSortSequence(left, offset,sequences), getMergeSortSequence(right, offset+middle,sequences), sequences\r\n    );\r\n  }\r\n\r\n\r\n  \r\n  function merge (left, right, sequence) {\r\n    let resultArray = [], leftOffset = left[1], leftArr = left[0], rightArr = right[0],rightOffset=right[1], startIndex = 0, leftIndex = 0, rightIndex=0\r\n    \r\n    while (leftIndex <leftArr.length || rightIndex < rightArr.length) {\r\n        sequence.push({\r\n            type: 'colorChange',\r\n            indices: [leftIndex+leftOffset, rightIndex+rightOffset]\r\n        })\r\n        sequence.push({\r\n            type: 'colorChange',\r\n            indices: [leftIndex+leftOffset, rightIndex+rightOffset]\r\n        })\r\n        if (rightIndex === rightArr.length || leftArr[leftIndex] < rightArr[rightIndex]) { \r\n            resultArray.push(leftArr[leftIndex])\r\n            sequence.push({\r\n                type: 'heightChange',\r\n                indices: [startIndex+leftOffset],\r\n                newHeights: [leftArr[leftIndex]]\r\n            })\r\n            leftIndex++;\r\n        } else {\r\n            resultArray.push(rightArr[rightIndex])\r\n            sequence.push({\r\n                type: 'heightChange',\r\n                indices: [startIndex+leftOffset],\r\n                newHeights: [rightArr[rightIndex]]\r\n            })\r\n            rightIndex++;\r\n        }\r\n        startIndex++\r\n    }\r\n    // while (leftIndex<leftArr.length){\r\n        \r\n    // }\r\n    return [resultArray, leftOffset]\r\n  }\r\n  \r\n","import React from 'react'\r\nimport './SortingAnimator.css'\r\nimport getMergeSortSequence from './SortingAlgorithm/MergeSort'\r\nimport getBubbleSortSequence from './SortingAlgorithm/BubbleSort'\r\nimport getQuickSortSequence from './SortingAlgorithm/QuickSort'\r\nconst ARRAY_LEN = 40\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'turquoise';\r\nconst ANIMATION_SPEED_MS = 10\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nconst SORTING_FUNC = {\r\n    \"merge sort\": getMergeSortSequence,\r\n    \"quick sort\": getQuickSortSequence,\r\n    \"bubble sort\": getBubbleSortSequence\r\n}\r\nexport default function SortingAnimator(){\r\n\r\n    const [array, setArray] = React.useState([])\r\n    const [arrayColor, setArrayColor] = React.useState([])\r\n    const [isSorting, setIsSorting] = React.useState(false)\r\n    const [isSorted, setIsSorted] = React.useState(false)\r\n    const [sortFunc, setSortFunc] = React.useState(null)\r\n    React.useEffect(()=> {\r\n        randomize()\r\n    },[])\r\n\r\n    React.useEffect(()=>{\r\n        if (array.length>0){\r\n            if (isSorted && isSorting){\r\n                randomize()\r\n            }else if (!isSorted && isSorting && sortFunc != null){\r\n                runAnimation(SORTING_FUNC[sortFunc])\r\n            }\r\n        }\r\n \r\n    }, [isSorted, isSorting])\r\n\r\n    function randomize(){\r\n        const arr = Array.from(Array(ARRAY_LEN)).map(_=>randomIntFromInterval(1,100))\r\n        setArray(arr)\r\n        const arrColor = Array.from(Array(ARRAY_LEN)).map(_=>PRIMARY_COLOR)\r\n        setArrayColor(arrColor)\r\n        setIsSorted(false)\r\n    }\r\n    function runAnimation(getSortSequence){\r\n        const sequences = []\r\n        const sortedArray = getSortSequence(array,0, sequences)\r\n        setIsSorting(true)\r\n        setTimeout(()=>{\r\n            setIsSorting(false)  \r\n            setIsSorted(true)          \r\n        }, (sequences.length-1)*ANIMATION_SPEED_MS)\r\n        for (let i=0; i < sequences.length;i++){\r\n            let sequence = sequences[i]\r\n            if(sequence['type']=='colorChange'){\r\n                const [idx1, idx2] = sequence['indices']\r\n                if (sequence.hasOwnProperty('color')){\r\n                    setTimeout(()=>{setArrayColorState([idx1,idx2], sequence['color'])}, i*ANIMATION_SPEED_MS) \r\n                }\r\n                else{\r\n                    setTimeout(()=>{setArrayColorState([idx1,idx2])}, i*ANIMATION_SPEED_MS)   \r\n                }\r\n                \r\n                \r\n            }else{\r\n                \r\n                const idxs = sequence['indices']\r\n                const newHeights = sequence['newHeights']\r\n    \r\n                setTimeout(()=>{idxs.forEach((v,idx)=>{\r\n                    setArrayState(v, newHeights[idx])\r\n                })}, i*ANIMATION_SPEED_MS)   \r\n            }\r\n        }\r\n        \r\n    }\r\n    function setArrayState(idx, newState){\r\n        \r\n        \r\n        setArray(oldArray=>{\r\n            const newArray=[...oldArray]\r\n            newArray[idx] = newState\r\n            return newArray\r\n        })\r\n    }\r\n    function setArrayColorState(indices, color = null){\r\n\r\n        if (color){\r\n            setArrayColor(oldArray => {\r\n                const newArray=[...oldArray]\r\n                indices.forEach(idx=>{\r\n                    newArray[idx] = color\r\n                })\r\n                return newArray\r\n        })}\r\n        else{\r\n            setArrayColor(oldArray => {\r\n                const newArray=[...oldArray]\r\n                indices.forEach(idx=>{\r\n                    if (newArray[idx] == PRIMARY_COLOR){\r\n                        newArray[idx] = SECONDARY_COLOR\r\n                    }else{\r\n                        newArray[idx] = PRIMARY_COLOR\r\n                    }\r\n                })\r\n                return newArray\r\n                \r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className=\"main-container\">\r\n        <h1>Sorting Animator</h1>\r\n            <div className=\"array-container\">\r\n            {array.map((value, idx)=>(\r\n                <div \r\n                    className='array-bar'\r\n                    key={idx}\r\n                    style={{\r\n                        backgroundColor: arrayColor[idx],\r\n                        height: `${value*4}px`\r\n                    }}\r\n                ></div>\r\n            ))}\r\n            \r\n        </div>\r\n        <div className=\"button-container\">\r\n            <button className = 'button' disabled={isSorting} onClick={()=>{\r\n                setIsSorting(true) \r\n                setSortFunc('merge sort')}\r\n                }>Merge Sort</button>\r\n            <button className = 'button' disabled={isSorting} onClick={()=>{setIsSorting(true) \r\n            setSortFunc('bubble sort')}}>Bubble Sort</button>\r\n            <button className = 'button' disabled={isSorting} onClick={()=>{setIsSorting(true) \r\n            setSortFunc('quick sort')}}>Quick Sort</button>\r\n        </div>\r\n        <div className=\"button-container\">\r\n            <button className = 'button' disabled={isSorting} onClick={()=>randomize()}>Randomize</button>\r\n        </div>\r\n       </div>\r\n        \r\n    )\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n    // min and max included\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  }\r\n  \r\nfunction arraysAreEqual(arrayOne, arrayTwo) {\r\nif (arrayOne.length !== arrayTwo.length) return false;\r\nfor (let i = 0; i < arrayOne.length; i++) {\r\n    if (arrayOne[i] !== arrayTwo[i]) {\r\n    return false;\r\n    }\r\n}\r\nreturn true;\r\n}\r\n\r\n","export default function getQuickSortSequence(unsortedArray, offset, sequences){\r\n\r\n    const auxArray = [...unsortedArray]\r\n    \r\n    if (auxArray.length <= 1){\r\n        if (auxArray.length==1){\r\n            sequences.push({\r\n                type: 'colorChange',\r\n                indices: [offset],\r\n                color: 'green'\r\n            })\r\n        }\r\n        return [...auxArray]\r\n    }\r\n    let pivot = auxArray[0]\r\n\r\n    let pivotIdx = 0 \r\n    for (let i = 1; i< auxArray.length; i++){\r\n        sequences.push(\r\n            {\r\n                type: 'colorChange',\r\n                indices: [pivotIdx+offset, i+offset]\r\n            }\r\n        )\r\n        sequences.push(\r\n            {\r\n                type: 'colorChange',\r\n                indices: [pivotIdx+offset, i+offset]\r\n            }\r\n        )\r\n        \r\n        if (auxArray[i]<pivot){\r\n            if (i == pivotIdx+1){\r\n                sequences.push(\r\n                    {\r\n                        type: \"heightChange\",\r\n                        indices: [pivotIdx+offset, pivotIdx+offset+1],\r\n                        newHeights: [auxArray[pivotIdx+1], pivot]\r\n                    }\r\n                ) \r\n                auxArray[pivotIdx] =  auxArray[pivotIdx+1]\r\n                auxArray[pivotIdx+1] = pivot\r\n            }\r\n            else{\r\n                let temp = auxArray[pivotIdx+1]\r\n                sequences.push(\r\n                    {\r\n                        type: \"heightChange\",\r\n                        indices: [pivotIdx+offset, pivotIdx+offset+1, i+offset],\r\n                        newHeights: [auxArray[i], pivot, temp]\r\n                    }\r\n                )\r\n                \r\n                auxArray[pivotIdx+1] = pivot\r\n                auxArray[pivotIdx] = auxArray[i]\r\n                auxArray[i]=temp\r\n            }\r\n            \r\n            pivotIdx++\r\n\r\n        }\r\n    }\r\n    sequences.push({\r\n        type: 'colorChange',\r\n        indices: [pivotIdx+offset],\r\n        color: 'green'\r\n    })\r\n    return [...getQuickSortSequence(auxArray.slice(0,pivotIdx),offset,sequences), pivot, ...getQuickSortSequence(auxArray.slice(pivotIdx+1,auxArray.length),offset+pivotIdx+1, sequences)]\r\n}","export default function getBubbleSortSequence(unsortedArray, offset, sequences){\r\n    const auxArray = [...unsortedArray]\r\n    for (let i = 0; i<auxArray.length;i++){\r\n        for (let j =0; j < auxArray.length-i-1; j++){\r\n            sequences.push({\r\n                type: 'colorChange',\r\n                indices: [j, j+1]\r\n            })\r\n            if (auxArray[j]>auxArray[j+1]){\r\n                sequences.push({\r\n                    type: 'heightChange',\r\n                    indices: [j, j+1],\r\n                    newHeights: [auxArray[j+1], auxArray[j]]\r\n                })\r\n                let temp = auxArray[j]\r\n                auxArray[j]=auxArray[j+1]\r\n                auxArray[j+1]=temp\r\n            }\r\n            sequences.push({\r\n                type: 'colorChange',\r\n                indices: [j, j+1]\r\n            })\r\n        }\r\n        sequences.push({\r\n            type: 'colorChange',\r\n            indices: [auxArray.length-i-1],\r\n            color: 'green'\r\n        })\r\n    }\r\n    return auxArray\r\n}","import './App.css';\nimport SortingAnimator from './SortingAnimator/SortingAnimator'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingAnimator/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}