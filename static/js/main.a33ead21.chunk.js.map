{"version":3,"sources":["SortingAnimator/SortingAlgorithm/MergeSort.js","SortingAnimator/SortingAlgorithm/BubbleSort.js","SortingAnimator/SortingAnimator.js","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortSequence","unsortedArray","offset","sequences","N","length","middle","Math","floor","left","slice","right","merge","sequence","resultArray","leftOffset","leftArr","rightArr","rightOffset","startIndex","leftIndex","rightIndex","push","type","indices","newHeights","getBubbleSortSequence","auxArray","i","j","temp","PRIMARY_COLOR","SortingAnimator","React","useState","array","setArray","arrayColor","setArrayColor","runAnimation","getSortSequence","console","log","idx1","idx2","setTimeout","oldArray","newArray","forEach","idx","idxs","v","setArrayState","newState","useEffect","arr","Array","from","map","_","min","max","random","arrColor","className","value","style","backgroundColor","height","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQACe,SAASA,EAAsBC,GAAoC,IAAtBC,EAAqB,uDAAd,EAAGC,EAAW,uCAEvEC,EAAIH,EAAcI,OACxB,GAAS,GAALD,EACF,MAAO,CAAC,GAAIF,GACR,GAAQ,GAAJE,EACN,MAAO,CAACH,EAAeC,GAK3B,IAAMI,EAASC,KAAKC,MAAMJ,EAAG,GAEvBK,EAAOR,EAAcS,MAAM,EAAGJ,GAC9BK,EAAQV,EAAcS,MAAMJ,EAAQF,GAG1C,OAAOQ,EACHZ,EAAqBS,EAAMP,EAAOC,GAAYH,EAAqBW,EAAOT,EAAOI,EAAOH,GAAYA,GAM1G,SAASS,EAAOH,EAAME,EAAOE,GAG3B,IAFA,IAAIC,EAAc,GAAIC,EAAaN,EAAK,GAAIO,EAAUP,EAAK,GAAIQ,EAAWN,EAAM,GAAGO,EAAYP,EAAM,GAAIQ,EAAa,EAAGC,EAAY,EAAGC,EAAW,EAE5ID,EAAWJ,EAAQX,QAAUgB,EAAaJ,EAASZ,QACtDQ,EAASS,KAAK,CACVC,KAAM,cACNC,QAAS,CAACJ,EAAUL,EAAYM,EAAWH,KAE/CL,EAASS,KAAK,CACVC,KAAM,cACNC,QAAS,CAACJ,EAAUL,EAAYM,EAAWH,KAE3CG,IAAeJ,EAASZ,QAAUW,EAAQI,GAAaH,EAASI,IAChEP,EAAYQ,KAAKN,EAAQI,IACzBP,EAASS,KAAK,CACVC,KAAM,eACNC,QAAS,CAACL,EAAWJ,GACrBU,WAAY,CAACT,EAAQI,MAEzBA,MAEAN,EAAYQ,KAAKL,EAASI,IAC1BR,EAASS,KAAK,CACVC,KAAM,eACNC,QAAS,CAACL,EAAWJ,GACrBU,WAAY,CAACR,EAASI,MAE1BA,KAEJF,IAKJ,MAAO,CAACL,EAAaC,GC3DV,SAASW,EAAsBzB,EAAeC,EAAQC,GAEjE,IADA,IAAMwB,EAAQ,YAAO1B,GACZ2B,EAAI,EAAGA,EAAED,EAAStB,OAAOuB,IAC9B,IAAK,IAAIC,EAAG,EAAGA,EAAIF,EAAStB,OAAOuB,EAAE,EAAGC,IAAI,CAKxC,GAJA1B,EAAUmB,KAAK,CACXC,KAAM,cACNC,QAAS,CAACK,EAAGA,EAAE,KAEfF,EAASE,GAAGF,EAASE,EAAE,GAAG,CAC1B1B,EAAUmB,KAAK,CACXC,KAAM,eACNC,QAAS,CAACK,EAAGA,EAAE,GACfJ,WAAY,CAACE,EAASE,EAAE,GAAIF,EAASE,MAEzC,IAAIC,EAAOH,EAASE,GACpBF,EAASE,GAAGF,EAASE,EAAE,GACvBF,EAASE,EAAE,GAAGC,EAElB3B,EAAUmB,KAAK,CACXC,KAAM,cACNC,QAAS,CAACK,EAAGA,EAAE,KAI3B,OAAOF,E,WCjBLI,EAAgB,YAIP,SAASC,IAEpB,MAA0BC,IAAMC,SAAS,IAAzC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAoCH,IAAMC,SAAS,IAAnD,mBAAOG,EAAP,KAAmBC,EAAnB,KAQA,SAASC,EAAaC,GAClB,IAAMrC,EAAY,GACEqC,EAAgBL,EAAM,EAAGhC,GAE7CsC,QAAQC,IAAIvC,GACZ,IAAK,IAAIyB,EAAE,EAAGA,EAAIzB,EAAUE,OAAOuB,IAAI,CACnC,IAAIf,EAAWV,EAAUyB,GACJ,eAAlBf,EAAQ,KAAyB,WAChC,kBAAqBA,EAAQ,QAA7B,GAAO8B,EAAP,KAAaC,EAAb,KACAC,YAAW,WAsBvB,IAA4BrB,IAtBmB,CAACmB,EAAKC,GAyBjDN,GAAc,SAAAQ,GACV,IAAMC,EAAS,YAAID,GAQnB,OAPAtB,EAAQwB,SAAQ,SAAAC,GACRF,EAASE,IAAQlB,EACjBgB,EAASE,GAlDL,MAoDJF,EAASE,GAAOlB,KAGjBgB,OAzDQ,IAuBuCnB,GAFlB,GAI9B,WAEF,IAAMsB,EAAOrC,EAAQ,QACfY,EAAaZ,EAAQ,WAE3BgC,YAAW,WAAKK,EAAKF,SAAQ,SAACG,EAAEF,GAC5BG,EAAcD,EAAG1B,EAAWwB,SA/BrB,IAgCNrB,GAPH,IAWd,SAASwB,EAAcH,EAAKI,GAGxBjB,GAAS,SAAAU,GACL,IAAMC,EAAS,YAAID,GAEnB,OADAC,EAASE,GAAOI,EACTN,KAmBf,OAtDAd,IAAMqB,WAAU,WACZ,IAAMC,EAAMC,MAAMC,KAAKD,MAXb,KAW+BE,KAAI,SAAAC,GAAC,OA+EvBC,EA/E+C,EA+E1CC,EA/E4C,IAiFrEtD,KAAKC,MAAMD,KAAKuD,UAAYD,EAAMD,EAAM,GAAKA,GAFxD,IAA+BA,EAAKC,KA9E5BzB,EAASmB,GACT,IAAMQ,EAAWP,MAAMC,KAAKD,MAblB,KAaoCE,KAAI,SAAAC,GAAC,OAAE5B,KACrDO,EAAcyB,KAChB,IAkDE,sBAAKC,UAAU,iBAAf,UACA,kDACI,qBAAKA,UAAU,kBAAf,SACC7B,EAAMuB,KAAI,SAACO,EAAOhB,GAAR,OACP,qBACIe,UAAU,YAEVE,MAAO,CACHC,gBAAiB9B,EAAWY,GAC5BmB,OAAO,GAAD,OAAW,EAANH,EAAL,QAHLhB,QASjB,sBAAKe,UAAU,mBAAf,UACI,wBAAQA,UAAY,SAASK,QAAS,kBAAI9B,EAAavC,IAAvD,wBACA,wBAAQgE,UAAY,SAASK,QAAS,kBAAI9B,EAAab,IAAvD,+BC7EG4C,MARf,WACE,OACE,qBAAKN,UAAU,MAAf,SACE,cAAC,EAAD,OCOSO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a33ead21.chunk.js","sourcesContent":["// Merge Sort (Recursive)\r\nexport default function getMergeSortSequence (unsortedArray,offset=0, sequences) {\r\n    // No need to sort the array if the array only has one element or empty\r\n    const N = unsortedArray.length\r\n    if (N == 0) {\r\n      return [[], offset];\r\n    }else if (N ==1){\r\n        return [unsortedArray, offset]\r\n    }\r\n    // In order to divide the array in half, we need to figure out the middle\r\n\r\n\r\n    const middle = Math.floor(N/ 2);\r\n    \r\n    const left = unsortedArray.slice(0, middle)\r\n    const right = unsortedArray.slice(middle, N)\r\n\r\n    // Using recursion to combine the left and right\r\n    return merge(\r\n        getMergeSortSequence(left, offset,sequences), getMergeSortSequence(right, offset+middle,sequences), sequences\r\n    );\r\n  }\r\n\r\n\r\n  \r\n  function merge (left, right, sequence) {\r\n    let resultArray = [], leftOffset = left[1], leftArr = left[0], rightArr = right[0],rightOffset=right[1], startIndex = 0, leftIndex = 0, rightIndex=0\r\n    \r\n    while (leftIndex <leftArr.length || rightIndex < rightArr.length) {\r\n        sequence.push({\r\n            type: 'colorChange',\r\n            indices: [leftIndex+leftOffset, rightIndex+rightOffset]\r\n        })\r\n        sequence.push({\r\n            type: 'colorChange',\r\n            indices: [leftIndex+leftOffset, rightIndex+rightOffset]\r\n        })\r\n        if (rightIndex === rightArr.length || leftArr[leftIndex] < rightArr[rightIndex]) { \r\n            resultArray.push(leftArr[leftIndex])\r\n            sequence.push({\r\n                type: 'heightChange',\r\n                indices: [startIndex+leftOffset],\r\n                newHeights: [leftArr[leftIndex]]\r\n            })\r\n            leftIndex++;\r\n        } else {\r\n            resultArray.push(rightArr[rightIndex])\r\n            sequence.push({\r\n                type: 'heightChange',\r\n                indices: [startIndex+leftOffset],\r\n                newHeights: [rightArr[rightIndex]]\r\n            })\r\n            rightIndex++;\r\n        }\r\n        startIndex++\r\n    }\r\n    // while (leftIndex<leftArr.length){\r\n        \r\n    // }\r\n    return [resultArray, leftOffset]\r\n  }\r\n  \r\n","export default function getBubbleSortSequence(unsortedArray, offset, sequences){\r\n    const auxArray = [...unsortedArray]\r\n    for (let i = 0; i<auxArray.length;i++){\r\n        for (let j =0; j < auxArray.length-i-1; j++){\r\n            sequences.push({\r\n                type: 'colorChange',\r\n                indices: [j, j+1]\r\n            })\r\n            if (auxArray[j]>auxArray[j+1]){\r\n                sequences.push({\r\n                    type: 'heightChange',\r\n                    indices: [j, j+1],\r\n                    newHeights: [auxArray[j+1], auxArray[j]]\r\n                })\r\n                let temp = auxArray[j]\r\n                auxArray[j]=auxArray[j+1]\r\n                auxArray[j+1]=temp\r\n            }\r\n            sequences.push({\r\n                type: 'colorChange',\r\n                indices: [j, j+1]\r\n            })\r\n        }\r\n    }\r\n    return auxArray\r\n}","import React from 'react'\r\nimport './SortingAnimator.css'\r\nimport getMergeSortSequence from './SortingAlgorithm/MergeSort'\r\nimport getBubbleSortSequence from './SortingAlgorithm/BubbleSort'\r\n\r\nconst ARRAY_LEN = 20\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'turquoise';\r\nconst ANIMATION_SPEED_MS = 100\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\nexport default function SortingAnimator(){\r\n\r\n    const [array, setArray] = React.useState([])\r\n    const [arrayColor, setArrayColor] = React.useState([])\r\n    React.useEffect(()=> {\r\n        const arr = Array.from(Array(ARRAY_LEN)).map(_=>randomIntFromInterval(1,100))\r\n        setArray(arr)\r\n        const arrColor = Array.from(Array(ARRAY_LEN)).map(_=>PRIMARY_COLOR)\r\n        setArrayColor(arrColor)\r\n    },[])\r\n\r\n    function runAnimation(getSortSequence){\r\n        const sequences = []\r\n        const sortedArray = getSortSequence(array,0, sequences)\r\n        // console.log(sortedArray)\r\n        console.log(sequences)\r\n        for (let i=0; i < sequences.length;i++){\r\n            let sequence = sequences[i]\r\n            if(sequence['type']=='colorChange'){\r\n                const [idx1, idx2] = sequence['indices']\r\n                setTimeout(()=>{setArrayColorState([idx1,idx2])}, i*ANIMATION_SPEED_MS)   \r\n                \r\n            }else{\r\n                \r\n                const idxs = sequence['indices']\r\n                const newHeights = sequence['newHeights']\r\n    \r\n                setTimeout(()=>{idxs.forEach((v,idx)=>{\r\n                    setArrayState(v, newHeights[idx])\r\n                })}, i*ANIMATION_SPEED_MS)   \r\n            }\r\n        }\r\n    }\r\n    function setArrayState(idx, newState){\r\n        \r\n        \r\n        setArray(oldArray=>{\r\n            const newArray=[...oldArray]\r\n            newArray[idx] = newState\r\n            return newArray\r\n        })\r\n    }\r\n    function setArrayColorState(indices){\r\n\r\n        \r\n        setArrayColor(oldArray => {\r\n            const newArray=[...oldArray]\r\n            indices.forEach(idx=>{\r\n                if (newArray[idx] == PRIMARY_COLOR){\r\n                    newArray[idx] = SECONDARY_COLOR\r\n                }else{\r\n                    newArray[idx] = PRIMARY_COLOR\r\n                }\r\n            })\r\n            return newArray\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"main-container\">\r\n        <h1>Sorting Animator</h1>\r\n            <div className=\"array-container\">\r\n            {array.map((value, idx)=>(\r\n                <div \r\n                    className='array-bar'\r\n                    key={idx}\r\n                    style={{\r\n                        backgroundColor: arrayColor[idx],\r\n                        height: `${value*4}px`\r\n                    }}\r\n                ></div>\r\n            ))}\r\n            \r\n        </div>\r\n        <div className=\"button-container\">\r\n            <button className = 'button' onClick={()=>runAnimation(getMergeSortSequence)}>Merge Sort</button>\r\n            <button className = 'button' onClick={()=>runAnimation(getBubbleSortSequence)}>Bubble Sort</button>\r\n        </div>\r\n       </div>\r\n        \r\n    )\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n    // min and max included\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  }\r\n  \r\nfunction arraysAreEqual(arrayOne, arrayTwo) {\r\nif (arrayOne.length !== arrayTwo.length) return false;\r\nfor (let i = 0; i < arrayOne.length; i++) {\r\n    if (arrayOne[i] !== arrayTwo[i]) {\r\n    return false;\r\n    }\r\n}\r\nreturn true;\r\n}\r\n\r\n","import './App.css';\nimport SortingAnimator from './SortingAnimator/SortingAnimator'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingAnimator/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}